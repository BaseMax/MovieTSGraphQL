# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  name: String!
  role: Role!
}

enum Role {
  user
  admin
  superadmin
}

type AuthPayload {
  user: User!
  token: String!
}

type Genre {
  id: ID!
  name: String!
  movieCount: Float!
}

type Movie {
  id: ID!
  plot: String
  description: String
  imdbScore: Float
  imdbRef: String
  duration: Int
  releaseDate: DateTime!
  backdrop: String!
  poster: String!
  gallery: [String!]!
  genres: [Genre!]!
  artists: [MovieArtist!]!
  downloadableAssets: [DownloadableAsset!]!
  languages: [MovieLanguage!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MovieArtist {
  artist: Artist!
  contribution: Contribution!
}

enum Contribution {
  actor
  director
  writer
}

type DownloadableAsset {
  title: String!
  link: String!
  type: AssetType!
}

enum AssetType {
  subtitle
  sound
  video
}

type MovieLanguage {
  tag: String!
  for: LanguageRelation!
}

enum LanguageRelation {
  original
  dub
  subtitle
}

type Artist {
  id: ID!
  name: String!
  bio: String
  dateOfBirth: DateTime
  avatar: String
  movies: [Movie!]!
}

type PaginatedArtist {
  total: Int!
  artists: [Artist!]!
}

type PaginatedMovies {
  total: Int!
  data: [Movie!]!
}

type Query {
  user: User!
  genres: [Genre!]!
  genre(id: String!): Genre
  artist(id: String!): Artist
  searchArtists(input: SearchArtistInput!): PaginatedArtist!
  movie(id: String!): Movie
  searchMovie(input: SearchMovieInput!): PaginatedMovies!
}

input SearchArtistInput {
  limit: Int! = 16
  skip: Int! = 0
  text: String
}

input SearchMovieInput {
  limit: Int! = 16
  skip: Int! = 0
  text: String
  genreIds: [String!]
  startDate: DateTime
  endDate: DateTime
}

type Mutation {
  register(input: RegisterUserInput!): AuthPayload!
  login(input: LoginUserInput!): AuthPayload!
  changeRole(userId: String!, role: Role!): User!
  createGenre(input: CreateGenreInput!): Genre!
  updateGenre(input: UpdateGenreInput!): Genre!
  deleteArtist(id: String!): Boolean!
  createArtist(input: CreateArtistInput!): Artist!
  updateArtist(input: UpdateArtistInput!): Artist!
  createMovie(input: CreateMovieInput!): Movie!
  updateMovie(input: UpdateMovieInput!): Movie!
  deleteMovie(id: String!): Boolean!
}

input RegisterUserInput {
  email: String!
  name: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateGenreInput {
  name: String!
}

input UpdateGenreInput {
  name: String!
  id: ID!
}

input CreateArtistInput {
  name: String!
  bio: String
  dateOfBirth: DateTime
  avatar: String
}

input UpdateArtistInput {
  name: String
  bio: String
  dateOfBirth: DateTime
  avatar: String
  id: String!
}

input CreateMovieInput {
  name: String!
  plot: String
  description: String
  imdbScore: Float
  imdbRef: String
  duration: Int
  releaseDate: DateTime!
  backdrop: String!
  poster: String!
  gallery: [String!]!
  genreIds: [String!]!
  artists: [CreateMovieArtistInput!]!
  downloadableAssets: [CreateDownloadableAssetInput!]!
  languages: [CreateMovieLanguageInput!]!
}

input CreateMovieArtistInput {
  artistId: String!
  contribution: Contribution!
}

input CreateDownloadableAssetInput {
  title: String!
  link: String!
  type: AssetType!
}

input CreateMovieLanguageInput {
  tag: String!
  for: LanguageRelation!
}

input UpdateMovieInput {
  name: String
  plot: String
  description: String
  imdbScore: Float
  imdbRef: String
  duration: Int
  releaseDate: DateTime
  backdrop: String
  poster: String
  gallery: [String!]
  genreIds: [String!]
  artists: [CreateMovieArtistInput!]
  downloadableAssets: [CreateDownloadableAssetInput!]
  languages: [CreateMovieLanguageInput!]
  id: ID!
}